import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:intl/intl.dart';
import 'package:firebase_core/firebase_core.dart'; 
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';

class AnalyzePage extends StatefulWidget {
  const AnalyzePage({Key? key}) : super(key: key);

  @override
  State<AnalyzePage> createState() => _AnalyzePageState();
}

class _AnalyzePageState extends State<AnalyzePage> {
  final DatabaseReference _database = FirebaseDatabase.instance.ref();
  bool _isLoading = true;
  bool _hasError = false;
  String _errorMessage = '';
  List<Map<String, dynamic>> _sensorData = [];
  Map<String, double> _averageData = {};
  List<LatLng> _locations = [];

  @override
  void initState() {
    super.initState();
    _fetchSensorData();
  }

  Future<void> _fetchSensorData() async {
    if (mounted) {
      setState(() {
        _isLoading = true;
        _hasError = false;
        _errorMessage = '';
      });
    }

    try {
      print('Mencoba mengambil data dari Firebase');
      
      // Tambahkan timeout untuk menghindari loading yang terlalu lama
      DataSnapshot snapshot = await _database.child('sensors').get()
          .timeout(const Duration(seconds: 15), 
          onTimeout: () => throw TimeoutException('Koneksi ke Firebase timeout'));
      
      print('Snapshot diterima: ${snapshot.exists}');
      
      if (snapshot.exists && snapshot.value != null) {
        _sensorData = [];
        _locations = [];
        
        // Cek tipe data snapshot.value
        print('Tipe data snapshot.value: ${snapshot.value.runtimeType}');
        
        if (snapshot.value is Map) {
          Map<dynamic, dynamic> values = snapshot.value as Map<dynamic, dynamic>;
          print('Jumlah data sensor: ${values.length}');
          
          values.forEach((key, value) {
            try {
              print('Memproses data untuk key: $key');
              
              // Pastikan data dalam format yang benar
              if (value is Map) {
                Map<String, dynamic> data = {};
                
                // Konversi setiap key dan value ke format yang benar
                value.forEach((k, v) {
                  data[k.toString()] = v;
                });
                
                _sensorData.add(data);
                
                // Print data untuk debugging
                print('Data: $data');
                
                // Extract location data
                if (data.containsKey('latitude') && data.containsKey('longitude')) {
                  try {
                    double lat = double.parse(data['latitude'].toString());
                    double lng = double.parse(data['longitude'].toString());
                    _locations.add(LatLng(lat, lng));
                    print('Lokasi ditambahkan: $lat, $lng');
                  } catch (e) {
                    print('Error parsing koordinat: $e');
                  }
                } else {
                  print('Data tidak memiliki koordinat latitude/longitude');
                }
              } else {
                print('Data untuk key $key bukan Map: ${value.runtimeType}');
              }
            } catch (e) {
              print('Error memproses data untuk key $key: $e');
            }
          });
          
          print('Total data yang diproses: ${_sensorData.length}');
          print('Total lokasi yang diekstrak: ${_locations.length}');
        } else {
          throw FormatException('Data di path "sensors" bukan Map: ${snapshot.value.runtimeType}');
        }
      } else {
        print('Tidak ada data di path "sensors" atau data null');
      }

      // Calculate averages if we have data
      if (_sensorData.isNotEmpty) {
        _calculateAverages();
      } else {
        print('Tidak ada data sensor untuk menghitung rata-rata');
        _averageData = {
          'Nitrogen': 0,
          'Phosphorus': 0,
          'Potassium': 0,
          'pH': 0,
          'EC': 0,
          'Temperature': 0,
          'Humidity': 0,
        };
      }
      
    } catch (e, stackTrace) {
      print('Error saat mengambil data: $e');
      print('Stack trace: $stackTrace');
      
      _hasError = true;
      
      if (e is TimeoutException) {
        _errorMessage = 'Koneksi ke database timeout. Periksa koneksi internet Anda dan coba lagi.';
      } else if (e is FirebaseException) {
        _errorMessage = 'Error Firebase: ${e.message}';
      } else {
        _errorMessage = 'Terjadi kesalahan: $e';
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _calculateAverages() {
    print('Menghitung rata-rata...');
    
    // Initialize average map
    _averageData = {
      'Nitrogen': 0,
      'Phosphorus': 0,
      'Potassium': 0,
      'pH': 0,
      'EC': 0,
      'Temperature': 0,
      'Humidity': 0,
    };
    
    if (_sensorData.isEmpty) return;
    
    // Track counts for each parameter
    Map<String, int> counts = {
      'Nitrogen': 0,
      'Phosphorus': 0,
      'Potassium': 0,
      'pH': 0,
      'EC': 0,
      'Temperature': 0,
      'Humidity': 0,
    };
    
    // Sum all values
    for (var data in _sensorData) {
      _averageData.forEach((key, _) {
        if (data.containsKey(key)) {
          try {
            var value = data[key];
            double numValue;
            
            if (value is num) {
              numValue = value.toDouble();
            } else if (value is String) {
              numValue = double.parse(value);
            } else if (value == null) {
              print('Warning: $key is null in a data entry');
              return;
            } else {
              print('Warning: $key has unexpected type: ${value.runtimeType}');
              return;
            }
            
            _averageData[key] = _averageData[key]! + numValue;
            counts[key] = counts[key]! + 1;
          } catch (e) {
            print('Error parsing $key value (${data[key]}): $e');
          }
        }
      });
    }
    
    // Divide by count to get average
    _averageData.forEach((key, value) {
      if (counts[key]! > 0) {
        _averageData[key] = value / counts[key]!;
        print('Rata-rata $key: ${_averageData[key]} (dari ${counts[key]} data)');
      } else {
        _averageData[key] = 0;
        print('Tidak ada data valid untuk $key');
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1E1E2C),
      appBar: AppBar(
        backgroundColor: const Color(0xFF2A2D3E),
        title: Text(
          'Soil Analysis',
          style: GoogleFonts.poppins(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: _fetchSensorData,
            tooltip: 'Refresh Data',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 16),
                  Text(
                    'Loading data...',
                    style: TextStyle(color: Colors.white70),
                  ),
                ],
              ),
            )
          : _hasError
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.error_outline, color: Colors.red, size: 64),
                      const SizedBox(height: 16),
                      Text(
                        'Gagal memuat data',
                        style: GoogleFonts.poppins(
                          color: Colors.white,
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 8),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 32.0),
                        child: Text(
                          _errorMessage,
                          style: GoogleFonts.poppins(
                            color: Colors.white70,
                            fontSize: 14,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      const SizedBox(height: 24),
                      ElevatedButton.icon(
                        onPressed: _fetchSensorData,
                        icon: const Icon(Icons.refresh),
                        label: const Text('Coba Lagi'),
                        style: ElevatedButton.styleFrom(
                          foregroundColor: Colors.white,
                          backgroundColor: Colors.blue,
                          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                        ),
                      ),
                    ],
                  ),
                )
              : _sensorData.isEmpty
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.info_outline, color: Colors.blue, size: 64),
                          const SizedBox(height: 16),
                          Text(
                            'Belum ada pengukuran tersimpan',
                            style: GoogleFonts.poppins(
                              color: Colors.white,
                              fontSize: 18,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          const SizedBox(height: 8),
                          Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 32.0),
                            child: Text(
                              'Tambahkan pengukuran baru pada halaman utama',
                              style: GoogleFonts.poppins(
                                color: Colors.white70,
                                fontSize: 14,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ],
                      ),
                    )
                  : RefreshIndicator(
                      onRefresh: _fetchSensorData,
                      backgroundColor: const Color(0xFF2A2D3E),
                      color: Colors.blue,
                      child: SingleChildScrollView(
                        physics: const AlwaysScrollableScrollPhysics(),
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              // Average data header
                              Text(
                                'Parameter Tanah Rata-rata',
                                style: GoogleFonts.poppins(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                              Text(
                                'Berdasarkan ${_sensorData.length} pengukuran',
                                style: GoogleFonts.poppins(
                                  fontSize: 14,
                                  color: Colors.white70,
                                ),
                              ),
                              
                              const SizedBox(height: 16),
                              
                              // Average data cards
                              GridView.builder(
                                shrinkWrap: true,
                                physics: const NeverScrollableScrollPhysics(),
                                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                                  crossAxisCount: 2,
                                  childAspectRatio: 1.5,
                                  crossAxisSpacing: 10,
                                  mainAxisSpacing: 10,
                                ),
                                itemCount: _averageData.length,
                                itemBuilder: (context, index) {
                                  String key = _averageData.keys.elementAt(index);
                                  double value = _averageData[key]!;
                                  
                                  IconData icon;
                                  Color color;
                                  
                                  // Assign icon and color based on parameter
                                  switch (key) {
                                    case 'Nitrogen':
                                      icon = Icons.eco;
                                      color = Colors.green;
                                      break;
                                    case 'Phosphorus':
                                      icon = Icons.water_drop;
                                      color = Colors.orange;
                                      break;
                                    case 'Potassium':
                                      icon = Icons.spa;
                                      color = Colors.purple;
                                      break;
                                    case 'pH':
                                      icon = Icons.science;
                                      color = Colors.red;
                                      break;
                                    case 'EC':
                                      icon = Icons.bolt;
                                      color = Colors.yellow;
                                      break;
                                    case 'Temperature':
                                      icon = Icons.thermostat;
                                      color = Colors.red;
                                      break;
                                    case 'Humidity':
                                      icon = Icons.water;
                                      color = Colors.blue;
                                      break;
                                    default:
                                      icon = Icons.sensors;
                                      color = Colors.grey;
                                  }
                                  
                                  // Units for each parameter
                                  String unit = '';
                                  if (key == 'Temperature') unit = '°C';
                                  else if (key == 'Humidity' || key == 'Nitrogen' || key == 'Phosphorus' || key == 'Potassium') unit = '%';
                                  else if (key == 'EC') unit = 'mS/cm';
                                  
                                  return Card(
                                    color: const Color(0xFF2A2D3E),
                                    elevation: 4,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    child: Padding(
                                      padding: const EdgeInsets.all(12),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                          Row(
                                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                            children: [
                                              Text(
                                                key,
                                                style: GoogleFonts.poppins(
                                                  fontSize: 16,
                                                  fontWeight: FontWeight.w500,
                                                  color: Colors.white,
                                                ),
                                              ),
                                              Icon(icon, color: color, size: 24),
                                            ],
                                          ),
                                          const SizedBox(height: 8),
                                          Text(
                                            '${value.toStringAsFixed(2)}$unit',
                                            style: GoogleFonts.robotoMono(
                                              fontSize: 24,
                                              fontWeight: FontWeight.bold,
                                              color: color,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  );
                                },
                              ),
                              
                              const SizedBox(height: 24),
                              
                              // Map section
                              Text(
                                'Lokasi Pengukuran',
                                style: GoogleFonts.poppins(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                              
                              const SizedBox(height: 16),
                              
                              // Map
                              _locations.isEmpty
                                  ? Card(
                                      color: const Color(0xFF2A2D3E),
                                      child: Padding(
                                        padding: const EdgeInsets.all(16.0),
                                        child: Center(
                                          child: Column(
                                            children: [
                                              const Icon(
                                                Icons.location_off,
                                                color: Colors.white70,
                                                size: 48,
                                              ),
                                              const SizedBox(height: 16),
                                              Text(
                                                'Tidak ada data lokasi',
                                                style: GoogleFonts.poppins(
                                                  color: Colors.white70,
                                                  fontSize: 16,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    )
                                  : Card(
                                      color: const Color(0xFF2A2D3E),
                                      elevation: 4,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(12),
                                      ),
                                      child: ClipRRect(
                                        borderRadius: BorderRadius.circular(12),
                                        child: SizedBox(
                                          height: 300,
                                          child: FlutterMap(
                                            options: MapOptions(
                                              center: _locations.first,
                                              zoom: 13.0,
                                            ),
                                            children: [
                                              TileLayer(
                                                urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                                                subdomains: const ['a', 'b', 'c'],
                                              ),
                                              MarkerLayer(
                                                markers: _locations
                                                    .map(
                                                      (point) => Marker(
                                                        point: point,
                                                        width: 80,
                                                        height: 80,
                                                        builder: (context) => const Icon(
                                                          Icons.location_on,
                                                          color: Colors.red,
                                                          size: 30,
                                                        ),
                                                      ),
                                                    )
                                                    .toList(),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ),
                              
                              const SizedBox(height: 24),
                              
                              // Recorded measurements
                              Text(
                                'Pengukuran Tersimpan',
                                style: GoogleFonts.poppins(
                                  fontSize: 22,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                              
                              const SizedBox(height: 16),
                              
                              // List of measurements
                              ListView.builder(
                                shrinkWrap: true,
                                physics: const NeverScrollableScrollPhysics(),
                                itemCount: _sensorData.length,
                                itemBuilder: (context, index) {
                                  final data = _sensorData[index];
                                  final name = data['name'] ?? 'Unnamed';
                                  
                                  // Handle timestamp safely
                                  DateTime timestamp;
                                  try {
                                    if (data['timestamp'] is int) {
                                      timestamp = DateTime.fromMillisecondsSinceEpoch(data['timestamp'] as int);
                                    } else if (data['timestamp'] is String) {
                                      // Try parsing if it's a string representation of a number
                                      timestamp = DateTime.fromMillisecondsSinceEpoch(int.parse(data['timestamp']));
                                    } else {
                                      timestamp = DateTime.now();
                                    }
                                  } catch (e) {
                                    print('Error parsing timestamp: $e');
                                    timestamp = DateTime.now();
                                  }
                                  
                                  // Handle coordinates safely
                                  String locationText = 'Tidak ada data lokasi';
                                  if (data.containsKey('latitude') && data.containsKey('longitude')) {
                                    locationText = '${data['latitude']}, ${data['longitude']}';
                                  }
                                  
                                  return Card(
                                    color: const Color(0xFF2A2D3E),
                                    elevation: 4,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(12),
                                    ),
                                    margin: const EdgeInsets.only(bottom: 12),
                                    child: ListTile(
                                      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                      title: Text(
                                        name,
                                        style: GoogleFonts.poppins(
                                          color: Colors.white,
                                          fontWeight: FontWeight.w500,
                                        ),
                                      ),
                                      subtitle: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            'Tanggal: ${DateFormat('dd MMM yyyy, HH:mm').format(timestamp)}',
                                            style: GoogleFonts.poppins(
                                              color: Colors.white70,
                                              fontSize: 12,
                                            ),
                                          ),
                                          Text(
                                            'Lokasi: $locationText',
                                            style: GoogleFonts.poppins(
                                              color: Colors.white70,
                                              fontSize: 12,
                                            ),
                                          ),
                                        ],
                                      ),
                                      trailing: const Icon(
                                        Icons.arrow_forward_ios,
                                        color: Colors.white54,
                                        size: 16,
                                      ),
                                      onTap: () {
                                        // Show detailed view
                                        _showDetailDialog(data);
                                      },
                                    ),
                                  );
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
    );
  }

  void _showDetailDialog(Map<String, dynamic> data) {
    // Handle timestamp safely
    DateTime timestamp;
    try {
      if (data['timestamp'] is int) {
        timestamp = DateTime.fromMillisecondsSinceEpoch(data['timestamp'] as int);
      } else if (data['timestamp'] is String) {
        timestamp = DateTime.fromMillisecondsSinceEpoch(int.parse(data['timestamp']));
      } else {
        timestamp = DateTime.now();
      }
    } catch (e) {
      print('Error parsing timestamp in detail dialog: $e');
      timestamp = DateTime.now();
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: const Color(0xFF2A2D3E),
        title: Text(
          data['name'] ?? 'Detail Pengukuran',
          style: GoogleFonts.poppins(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Padding(
                padding: const EdgeInsets.only(bottom: 8.0),
                child: Text(
                  'Tanggal: ${DateFormat('dd MMM yyyy, HH:mm').format(timestamp)}',
                  style: GoogleFonts.poppins(color: Colors.white70),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(bottom: 8.0),
                child: Text(
                  'Lokasi: ${data['latitude'] ?? 'N/A'}, ${data['longitude'] ?? 'N/A'}',
                  style: GoogleFonts.poppins(color: Colors.white70),
                ),
              ),
              const Divider(color: Colors.white30),
              ...['Nitrogen', 'Phosphorus', 'Potassium', 'pH', 'EC', 'Temperature', 'Humidity']
                  .where((key) => data.containsKey(key) && data[key] != null)
                  .map((key) {
                String unit = '';
                if (key == 'Temperature') unit = '°C';
                else if (key == 'Humidity' || key == 'Nitrogen' || key == 'Phosphorus' || key == 'Potassium') unit = '%';
                else if (key == 'EC') unit = 'mS/cm';
                
                // Format value safely
                String valueText;
                try {
                  if (data[key] is num) {
                    valueText = '${data[key]}$unit';
                  } else {
                    valueText = '${data[key]}$unit';
                  }
                } catch (e) {
                  valueText = 'Error';
                }
                
                return Padding(
                  padding: const EdgeInsets.symmetric(vertical: 4.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        key,
                        style: GoogleFonts.poppins(color: Colors.white),
                      ),
                      Text(
                        valueText,
                        style: GoogleFonts.poppins(
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                );
              }).toList(),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'Tutup',
              style: GoogleFonts.poppins(color: Colors.blue),
            ),
          ),
        ],
      ),
    );
  }
}

class TimeoutException implements Exception {
  final String message;
  TimeoutException(this.message);
  
  @override
  String toString() => message;
}